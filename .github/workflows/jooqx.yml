name: jooqx

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
      - '*.md'
      - 'LICENSE'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ main ]
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/*.yml'
      - '*.md'
      - 'LICENSE'

env:
  PROFILE: 'jooqx'
  JAVA_DIST: 'temurin'

jobs:
  context:
    uses: ./.github/workflows/subwf-context.yml
    with:
      profile: 'jooqx'
      skipBranchPattern: '^(jpa|rsql)/.*'
    secrets:
      githubToken: ${{ secrets.OSS_GITHUB_TOKEN }}
      gpgKey: ${{ secrets.CI_GPG_PRIVATE_KEY }}
      gpgPassphrase: ${{ secrets.CI_GPG_PASSPHARSE }}

  build:
    needs: context
    if: needs.context.outputs.shouldBuild == 'true'
    strategy:
      matrix:
        java: [ '8', '11' ]
        os: [ 'ubuntu-latest', 'windows-latest' ]
    name: Java ${{ matrix.Java }} (${{ matrix.os }}) build
    runs-on: ${{ matrix.os }}
    env:
      PROFILE: 'ciBuild'
    steps:
      - uses: actions/checkout@v2.4.0

      - name: Build
        uses: ./.github/actions/gha-build
        with:
          profile: ${{ env.PROFILE }}
          version: ${{ needs.context.outputs.version }}
          semanticVersion: ${{ needs.context.outputs.semanticVersion }}
          hashVersion: ${{ needs.context.outputs.commitId }}
          javaDist: ${{ env.JAVA_DIST }}
          javaVersion: ${{ matrix.Java }}

  analysis:
    needs: context
    if: needs.context.outputs.shouldBuild == 'true'
    strategy:
      matrix:
        java: [ '11' ]
        os: [ 'ubuntu-latest' ]
    name: Java ${{ matrix.Java }} (${{ matrix.os }}) test
    runs-on: ${{ matrix.os }}
    env:
      PROFILE: 'ciSonar'
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - uses: actions/setup-java@v2
        with:
          distribution: ${{ env.JAVA_DIST }}
          java-version: ${{ matrix.Java }}
          cache: 'gradle'

      - name: Cache SonarCloud packages
        uses: actions/cache@v2.1.4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Generate jOOQ test schema
        shell: bash
        run: ./generateJooq.sh

      - name: Full test
        shell: bash
        run: |
          ./gradlew test --stacktrace \
              -Pprofile=${{ env.PROFILE }} \
              -PsemanticVersion=${{ needs.context.outputs.semanticVersion }}

      - name: SonarQube
        shell: bash
        run: |
          ./gradlew sonarqube -x test --stacktrace \
              -Pprofile=${{ env.PROFILE }} \
              -PsemanticVersion=${{ needs.context.outputs.semanticVersion }} \
              -Dsonar.branch.name=${{ needs.context.outputs.branch }} \
              -Dsonar.login=${{ secrets.OSS_SONARQUBE_TOKEN }} \
              -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    needs: [ context, build, analysis ]
    if: needs.context.outputs.shouldPublish == 'true' || needs.context.outputs.isRelease == 'true'
    uses: ./.github/workflows/subwf-publish.yml
    with:
      profile: 'jooqx'
      version: ${{ needs.context.outputs.version }}
      semanticVersion: ${{ needs.context.outputs.semanticVersion }}
      hashVersion: ${{ needs.context.outputs.commitId }}
      isRelease: ${{ needs.context.outputs.isRelease }}
    secrets:
      ossrhUser: ${{ secrets.OSS_SONATYPE_USER }}
      ossrhToken: ${{ secrets.OSS_SONATYPE_PASSWORD }}
      gpgKey: ${{ secrets.CI_GPG_PRIVATE_KEY }}
      gpgPassphrase: ${{ secrets.CI_GPG_PASSPHARSE }}

  docs:
    runs-on: ubuntu-latest
    needs: [ context, build ]
    if: needs.context.outputs.shouldPublish == 'true' || needs.context.outputs.isRelease == 'true'
    steps:
      - name: Trigger build ${{ env.PROFILE }} documentation
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run docs.yml \
            -f profile=${{ env.PROFILE }} \
            -f version=${{ needs.context.outputs.version }} \
            -f semanticVersion=${{ needs.context.outputs.semanticVersion }} \
            -f hashVersion=${{ needs.context.outputs.commitId }} \
            -f sha=${{ needs.context.outputs.sha }} \
            -f isRelease=${{ needs.context.outputs.isRelease }} \
            -f antoraBuildDir=docs/build/antora \
            --repo zero88/jooqx

  release:
    runs-on: ubuntu-latest
    needs: [ context, build, analysis, publish ]
    if: needs.context.outputs.isRelease == 'true'
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ env.PROFILE }} ${{ needs.context.outputs.version }}
          tag_name: ${{ needs.context.outputs.branch }}
          generate_release_notes: true
