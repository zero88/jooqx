package io.github.zero88.jooqx.resultadapter;

import java.util.Objects;

import org.jooq.Record;

import io.github.zero88.jooqx.DSLAdapter;
import io.github.zero88.jooqx.Jooqx;
import io.github.zero88.jooqx.JsonRecord;
import io.github.zero88.sample.model.pgsql.Tables;
import io.github.zero88.sample.model.pgsql.tables.Books;
import io.github.zero88.sample.model.pgsql.tables.pojos.Authors;
import io.github.zero88.sample.model.pgsql.tables.records.AuthorsRecord;
import io.vertx.docgen.Source;

@Source
class ExampleResultAdapter {

    void toJsonRecord(Jooqx jooqx) {
        /*
         * Vertx JsonObject vs jOOQ Record... Ya, merging: JsonRecord
         */
        final io.github.zero88.sample.model.pgsql.tables.Authors table = Tables.AUTHORS;
        jooqx.fetchJsonRecord(dsl -> dsl.selectFrom(table).where(table.NAME.eq("zero88")).limit(1)) // <1>
             .onSuccess(r -> {
                 JsonRecord<AuthorsRecord> record = r;                                  // <2>
                 assert Objects.equals(record.toJson().encode(), """                    
                     {"id": 8, "name": "zero88", "country": "VN"}
                     """);                                                              // <3>

                 assert Objects.equals(record.toString(), """
                     +----+-------+-------+
                     |  id|name   |country|
                     +----+-------+-------+
                     |  *8|*zero88|*VN    |
                     +----+-------+-------+
                     """);                                                              // <4>
             }).onFailure(Throwable::printStackTrace);
    }

    void toClass(Jooqx jooqx) {
        // Authors is POJO class that is generated by jOOQ
        jooqx.execute(dsl -> dsl.selectFrom(Tables.AUTHORS),
                      DSLAdapter.fetchMany(Tables.AUTHORS, Authors.class))              // <1>
             .onSuccess(authors -> {
                 Authors author = authors.get(0);                                       // <2>
                 assert author.getId() == 1;                                            // <3>
                 assert Objects.equals(author.getCountry(), "UK");                  // <4>
             }).onFailure(Throwable::printStackTrace);
    }

    void toFields(Jooqx jooqx) {
        final Books t = Tables.BOOKS;
        jooqx.execute(dsl -> dsl.insertInto(t, t.TITLE).values("aha").returning(), DSLAdapter.fetchOne(t.ID),   // <1>
                      ar -> {
                          Record record = ar.result();
                          assert record.get(t.ID) == 10;                                // <2>
                          assert (Integer) record.getValue(0) == 10;            // <3>
                      });
    }

}
