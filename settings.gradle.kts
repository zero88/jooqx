/*
 * This file was generated by the Gradle 'init' task.
 *
 * The settings file is used to specify which projects to include in your build.
 *
 * Detailed information about configuring a multi-project build in Gradle can be found
 * in the user manual at https://docs.gradle.org/6.7/userguide/multi_project_builds.html
 */

pluginManagement {
    repositories {
        mavenLocal()
        gradlePluginPortal()
    }
}

rootProject.name = "jooqx-parent"
val profile: String by settings
val supportDatabases = arrayOf("db2", "h2", "mssql", "mysql", "oracle", "postgres", "sqlite")
var pp: Array<String> = arrayOf()
val pools = mutableMapOf(
    "jpa" to arrayOf(":jpa-ext"),
    "jooqx" to arrayOf(":jooqx", ":spi"),
    "rsql" to arrayOf(":rsql:core", ":rsql:jooq"),
    "integtest" to supportDatabases.map { ":integtest:${it}" }.toTypedArray(),
    "sample" to arrayOf(":sample:web"),
)
val jooqxDocs = arrayOf(":docs:asciidoc", ":docs:testing-asciidoc")
val rsqlDocs = arrayOf(":rsql:asciidoc")
val excludeCISonar = jooqxDocs + rsqlDocs
val excludeCIBuild = pools["sample"]!! + pools["integtest"]!! + excludeCISonar
pools.putAll(
    mapOf(
        "jooqx:sonar" to pools["jooqx"]!!.plus(pools["integtest"]!!),
        "jooqx:docs" to pools["jooqx"]!!.plus(":integtest:postgres").plus(jooqxDocs),
        "rsql:sonar" to pools["rsql"]!!,
        "rsql:docs" to pools["rsql"]!!.plus(pools["jooqx"]!!).plus(":integtest:postgres").plus(rsqlDocs)
    )
)

fun flatten(): List<String> = pools.values.toTypedArray().flatten()

pp = when {
    profile == "all" || profile.isBlank() -> flatten().toTypedArray()
    profile == "ciBuild"                  -> flatten().filter { !excludeCIBuild.contains(it) }.toTypedArray()
    else                                  -> pools.getOrElse(profile) { throw IllegalArgumentException("Not found profile[$profile]") }
}

pp.forEach { include(it) }
if (pp.contains(":jooqx")) {
    project(":jooqx").projectDir = file("core")
}

if (gradle is ExtensionAware) {
    val extensions = (gradle as ExtensionAware).extensions
    extensions.add("PROJECT_POOL", pools.toMap())
    extensions.add("SKIP_PUBLISH", excludeCIBuild + arrayOf(":docs", ":rsql", ":sample", ":integtest"))
    extensions.add("SAKILA_DB2", "${rootProject.projectDir}/sakila/db2-sakila-db")
    extensions.add("SAKILA_ORACLE", "${rootProject.projectDir}/sakila/oracle-sakila-db")
    extensions.add("SAKILA_MSSQL", "${rootProject.projectDir}/sakila/sql-server-sakila-db")
    extensions.add("SAKILA_MYSQL", "${rootProject.projectDir}/sakila/mysql-sakila-db")
    extensions.add("SAKILA_PG", "${rootProject.projectDir}/sakila/postgres-sakila-db")
    extensions.add("SAKILA_SQLITE", "${rootProject.projectDir}/sakila/sqlite-sakila-db")
}
